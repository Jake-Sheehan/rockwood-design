---
export const prerender = true;

import { getProjectBySlug, getAllProjects, urlFor } from '../../lib.ts';
import Layout from '@layouts/Layout.astro';
import ThematicBreak from '@components/ThematicBreak.astro';
import LinkButton from '@components/buttons/LinkButton.astro';
import Grid from '@components/Grid.astro';
import type { Project } from '../../../sanity.types';

export async function getStaticPaths() {
    const projects = await getAllProjects();
    return projects
        .filter((p) => p.slug) // avoid undefined slugs
        .map((p) => ({ params: { slug: p.slug } }));
}

if (!Astro.params.slug) throw new Error('Slug parameter is missing');
const project = await getProjectBySlug(Astro.params.slug);

type GalleryImage = NonNullable<Project['gallery']>[number];

// widths used for responsive srcset
const WIDTHS = [320, 480, 640, 800, 1024, 1280];

function srcsetFor(img: GalleryImage) {
    return WIDTHS.map(
        (w) => `${urlFor(img).width(w).auto('format').url()} ${w}w`
    ).join(', ');
}
---

<Layout title={project?.title || 'Project'}>
    <section class="hero-section">
        <div class="hero">
            <img
                class="hero-img"
                src={project?.hero
                    ? urlFor(project.hero).width(1600).auto('format').url()
                    : '/placeholder.png'}
                alt={project?.title
                    ? `${project.title} â€” hero image`
                    : 'Hero image'}
                decoding="async"
                fetchpriority="high"
            />
        </div>
        <div class="info">
            <div class="info-text">
                <h1 class="title text-shadow">{project?.title}</h1>
                <ThematicBreak />
                <div class="categories">
                    {
                        project?.categories?.map((category) => (
                            <span class="category">{category.title}</span>
                        ))
                    }
                </div>
            </div>
            <LinkButton href="/contact">Contact Us</LinkButton>
        </div>
    </section>

    <section class="gallery section wrapper">
        <Grid>
            {
                project?.gallery?.map((image) => {
                    const src = urlFor(image).width(320).auto('format').url();
                    const full = urlFor(image).width(1800).auto('format').url();
                    const alt = 'Project image'; // add an `alt` field to your image schema later and read it here
                    return (
                        <a
                            href={full}
                            class="thumb"
                            target="_blank"
                            rel="noreferrer"
                            aria-label="Open full image"
                        >
                            <img
                                src={src}
                                srcset={srcsetFor(image)}
                                sizes="(min-width:1200px) 25vw, (min-width:900px) 33vw, (min-width:600px) 50vw, 100vw"
                                alt={alt}
                                loading="lazy"
                                decoding="async"
                            />
                        </a>
                    );
                })
            }
        </Grid>
    </section>
</Layout>

<style>
    /* --- HERO --- */
    .hero-section {
        position: relative;
        width: 100%;
        background-color: var(--color-surface-card);
        padding: 0 !important;
        margin: 0;
    }

    .hero {
        block-size: 60svh;
        z-index: 1;
    }

    .hero .hero-img {
        display: block;
        inline-size: 100%;
        block-size: 100%;
        object-fit: cover;
    }

    .info {
        position: relative;
        inline-size: 100%;
        z-index: 2;
        padding: 2rem;
        margin-top: -100px;

        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: center;
        gap: 1.5rem;
        background: linear-gradient(
            to bottom,
            rgb(var(--color-surface-overlay-3) / 0) 0%,
            rgb(var(--color-surface-overlay-3) / 1) 100px
        );

        @media (min-width: 768px) {
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
        }
    }

    .info-text {
        width: fit-content;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        gap: 1rem;
    }

    .title {
        font-size: 2.5rem !important;
    }

    .categories {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .category {
        color: var(--color-text-muted);
        text-transform: capitalize;
        background: #222;
        padding: 0.25rem 0.5rem;
        border-radius: 0.5rem;
        font-size: 0.9rem;
        display: inline-block;
        margin: 0;
    }

    /* --- GALLERY --- */
    /* Let your Grid component define columns; these just style items */
    .thumb {
        display: block;
        border-radius: var(--rounded-sm);
        overflow: hidden;
        box-shadow: 0 5px 12px rgb(0 0 0 / 0.5);
        outline: 1px solid rgb(255 255 255 / 0.06);
        aspect-ratio: 4 / 3; /* use 1/1 for square, 3/2 for wider */
        background: #111;
    }
    .thumb img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }
</style>
